// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    slug        String   @unique
    color       String   @default("#3b82f6")
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    posts       Post[]

    @@index([slug])
}

model Post {
    id          String   @id @default(cuid())
    title       String
    content     String   @db.Text
    slug        String   @unique
    isLocked    Boolean  @default(false)
    isPinned    Boolean  @default(false)
    viewCount   Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    
    authorId    String
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    
    replies     Reply[]
    votes       PostVote[]

    @@index([categoryId])
    @@index([authorId])
    @@index([createdAt])
    @@index([slug])
}

model Reply {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    postId    String
    post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    
    authorId  String
    author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    
    parentId  String?
    parent    Reply? @relation("ReplyToReply", fields: [parentId], references: [id])
    children  Reply[] @relation("ReplyToReply")
    
    votes     ReplyVote[]

    @@index([postId])
    @@index([authorId])
    @@index([parentId])
}

model PostVote {
    id     String @id @default(cuid())
    type   VoteType
    
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())

    @@unique([postId, userId])
    @@index([postId])
    @@index([userId])
}

model ReplyVote {
    id      String @id @default(cuid())
    type    VoteType
    
    replyId String
    reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
    
    userId  String
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())

    @@unique([replyId, userId])
    @@index([replyId])
    @@index([userId])
}

enum VoteType {
    UP
    DOWN
}

// MVP Models for Idea Platform
model Idea {
    id          String    @id @default(cuid())
    title       String
    description String    @db.Text // Rich text as HTML
    category    IdeaCategory
    tags        String[]
    
    // Simple engagement
    upvotes     Int       @default(0)
    downvotes   Int       @default(0)
    
    // Team formation (simple)
    wantsTeam   Boolean   @default(false)
    neededSkills String[] // What skills are needed
    
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    comments    Comment[]
    votes       Vote[]
    interests   Interest[] // Users interested in joining team
    
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    
    @@index([authorId])
    @@index([category])
    @@index([createdAt])
    @@index([wantsTeam])
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
    idea      Idea     @relation(fields: [ideaId], references: [id])
    ideaId    String
    
    // Simple threading
    parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
    parentId  String?
    replies   Comment[] @relation("CommentReplies")
    
    createdAt DateTime @default(now())
    
    @@index([ideaId])
    @@index([authorId])
    @@index([parentId])
}

model Vote {
    id     String    @id @default(cuid())
    type   VoteType  // UP or DOWN
    
    user   User      @relation(fields: [userId], references: [id])
    userId String
    idea   Idea      @relation(fields: [ideaId], references: [id])
    ideaId String
    
    @@unique([userId, ideaId])
    @@index([ideaId])
    @@index([userId])
}

model Interest {
    id      String @id @default(cuid())
    message String? // Optional message when showing interest
    
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    idea    Idea   @relation(fields: [ideaId], references: [id])
    ideaId  String
    
    createdAt DateTime @default(now())
    
    @@unique([userId, ideaId])
    @@index([ideaId])
    @@index([userId])
}

enum IdeaCategory {
    SAAS
    MOBILE_APP
    WEB_APP
    HARDWARE
    SERVICE
    OTHER
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    skills        String[]  // User skills for team formation
    password      String?   // For credentials authentication
    role          UserRole  @default(USER)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    replies       Reply[]
    postVotes     PostVote[]
    replyVotes    ReplyVote[]
    
    // MVP relations
    ideas         Idea[]
    comments      Comment[]
    votes         Vote[]
    interests     Interest[]
}

enum UserRole {
    ADMIN
    MODERATOR
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
